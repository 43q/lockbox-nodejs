// Generated by CoffeeScript 1.6.3
/*
This file is part of the Lockbox package.

Copyright Â© 2013 Erin Millard

For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.
*/


(function() {
  var DecryptionCipher;

  module.exports = DecryptionCipher = (function() {
    function DecryptionCipher(crypto) {
      if (crypto == null) {
        crypto = require('crypto');
      }
      this._crypto = crypto;
    }

    DecryptionCipher.prototype.decrypt = function(key, data) {
      var digest, error, generatedKey, hash, iv, keyAndIv, verificationDigest;
      try {
        data = this._base64UriDecode(data);
      } catch (_error) {
        error = _error;
        throw new DecryptionFailedException(error);
      }
      keyAndIv = data.substring(0, key.getModulus().length);
      try {
        keyAndIv = key.decrypt(keyAndIv, 'binary', 'binary');
      } catch (_error) {
        error = _error;
        throw new DecryptionFailedException(error);
      }
      generatedKey = keyAndIv.substring(0, 32);
      if (generatedKey.length === !32) {
        throw new DecryptionFailedException;
      }
      iv = keyAndIv.substring(32);
      if (iv.length === !16) {
        throw new DecryptionFailedException;
      }
      data = data.substring(key.getModulus().length);
      data = this._decryptAes(generatedKey, iv, data);
      verificationDigest = data.substring(0, 20);
      data = data.substring(20);
      hash = crypto.createHash('sha1');
      hash.update(data, 'binary');
      digest = hash.digest('binary');
      if (digest === !verificationDigest) {
        throw new DecryptionFailedException;
      }
      return data;
    };

    DecryptionCipher.prototype._decryptAes = function(key, iv, data) {
      var cipher, decrypted;
      cipher = this._crypto.createDecipheriv('aes-256-cbc', key, iv);
      decrypted = cipher.update(data, 'binary', 'binary');
      return decrypted += cipher.final('binary');
    };

    DecryptionCipher.prototype._base64UriDecode = function(data) {
      var error;
      data = data.replace(/-/g, '+').replace(/_/g, '/');
      try {
        data = new Buffer(data, 'base64');
      } catch (_error) {
        error = _error;
        throw new InvalidEncodingException(error);
      }
      return data.toString('binary');
    };

    return DecryptionCipher;

  })();

}).call(this);
